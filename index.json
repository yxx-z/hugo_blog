[{"categories":["java"],"content":"开发中经常遇到树状结构，每次都要写比较麻烦。这里写了一个工具类简化其中的步骤 话不多说，上代码 菜单类 import com.baomidou.mybatisplus.annotation.*; import io.swagger.annotations.ApiModelProperty; import lombok.Data; import java.io.Serializable; import java.util.List; /** * @author yxx * @since 2023-03-07 14:46 */ @Data @TableName(\"ee_menu\") public class Menu implements Serializable { /** * 主键 */ @ApiModelProperty(value = \"业务主键\") @TableId(type = IdType.AUTO) private Integer id; /** * 父id */ @ApiModelProperty(value = \"父id\") private Integer parentId; /** * 菜单标识 */ @ApiModelProperty(value = \"菜单标识\") private String menuCode; /** * 菜单名称 */ @ApiModelProperty(value = \"菜单名称\") private String menuName; /** * 菜单类型: 1- 管理系统; 2- 子系统 */ @ApiModelProperty(value = \"菜单类型: 1- 管理系统; 2- 子系统\") private Integer menuType; /** * 是否删除: 0- 否; 1- 是 */ @ApiModelProperty(value = \"是否删除: 0- 否; 1- 是\") @TableLogic private Integer isDelete; /** * 子菜单集合 */ @TableField(exist = false) private List\u003cMenu\u003e children; } 工具类 import cn.hutool.core.collection.CollUtil; import cn.hutool.core.text.CharSequenceUtil; import lombok.AllArgsConstructor; import lombok.Data; import lombok.NoArgsConstructor; import lombok.experimental.Accessors; import java.beans.PropertyDescriptor; import java.lang.reflect.Method; import java.util.*; import java.util.stream.Collectors; import java.util.stream.Stream; /** * @author yxx * @apiNote 返回层级菜单 * @date 2023-03-10 14:51 */ @Data @AllArgsConstructor @NoArgsConstructor @Accessors(chain = true) public class TreeMenuUtil\u003cT\u003e { /** * 顶层节点的值 */ private String rootValue; /** * 对应父节点的子属性 */ private String childKey; /** * 父节点的属性值 */ private String rootKey; /** * 子菜单放置的字段 */ private String childProperty; /** * 要过滤的集合 */ private List\u003cT\u003e list; /** * @return List * @apiNote 返回树状菜单 */ public List\u003cT\u003e rootMenu() { //判断rootValue是否为空，如果为空的话给rootValue赋值 ifNullRootValueSetValue(); //筛选出来顶级目录 List\u003cT\u003e rootList = list.stream() .filter(item -\u003e CharSequenceUtil.equals(rootValue, getValueByProperty(item, childKey))) .collect(Collectors.toList()); //从数据集合中剔除顶层目录，减少后续遍历次数，加快速度 list.removeAll(rootList); //如果list不为空的话则遍历赋值子菜单 if (CollUtil.isNotEmpty(rootList)) { for (T t : rootList) { setChildren(t, list); } return rootList; } else { return list; } } /** * 判断rootKey是空值的话则赋值 */ private void ifNullRootValueSetValue() { if (CharSequenceUtil.isBlank(rootValue)) { Set\u003cString\u003e rootValueSet = list.stream() .map(m -\u003e getValueByProperty(m, rootKey)) .collect(Collectors.toSet()); Set\u003cString\u003e childValueSet = list.stream() .map(m -\u003e getValueByProperty(m, childKey)) .collect(Collectors.toSet()); //将childKey（parentId）中的数据全部赋值过来 Set\u003cString\u003e resultList = new HashSet\u003c\u003e(childValueSet); //算出childValueSet和rootValueSet的交集 childValueSet.retainAll(rootValueSet); // 算出childValueSet 与交集不同的部分 resultList.removeAll(childValueSet); //如果有差集的话，把第一个数据返回到rootValue中 if (CollUtil.isNotEmpty(resultList)) { rootValue = String.valueOf(resultList.toArray()[0]); } } } /** * 给父级菜单赋值子菜单 * * @param t 父菜单对象 * @param list 所有数据 */ private void setChildren(T t, List\u003cT\u003e list) { String childPropertyTypeName = Objects.requireNonNull(getPropertyDescriptor(t, childProperty)).getPropertyType().getName(); Stream\u003cT\u003e childStream = list.stream() .filter(item -\u003e isChild(t, item)); Collection\u003cT\u003e childList; if (childPropertyTypeName.contains(\"Set\")) { childList = childStream.collect(Collectors.toSet()); setValueByProperty(t, childList); } else { childList = childStream.collect(Collectors.toList()); setValueByProperty(t, childList); } list.removeAll(childList); if (CollUtil.isNotEmpty(childList)) { for (T item : childList) { setChildren(item, list); } } } /** * 判断当前对象是不是父级对象的子级 * * @param t 父对象 * @param item 子对象 * @return true:是; false:不是 */ private boolean isChild(T t, T item) { rootValue = getValueByProperty(t, rootKey); String childParentValue = getValueByProperty(item, childKey); return rootValue.equals(childParentValue); } /** * 通过属性获取属性的值 * * @param t 对象 * @param key 属性 * @return 属性的值 */ private String getValueByProperty(T t, String key) { PropertyDescriptor keyProperty = get","date":"2023-03-10","objectID":"/tree/:0:0","tags":["tree"],"title":"java中通用树状菜单工具类","uri":"/tree/"},{"categories":["基础"],"content":"新的篇章，新的开始 经历了国内云服务器被封导致以前的博客全部丢失，现在转战静态博客，部署github上 ","date":"2023-03-09","objectID":"/first/:0:0","tags":["基础"],"title":"开篇!","uri":"/first/"}]